Задание 1. Ответьте на вопросы:
1.1. Что такое goroutine в Go и как она отличается от традиционного потока?

Ответ: Горутина - это интрумент языка go для реализации конкуретного выполнения задач. По сути является лекговесным потоком.
Различия: Горутины управляются "рантаймом" go, а потоки ОС - планировщиком ОС. 
Горутины более легковесны и имеют размер стека 2кб, в то время, как потоки ОС 1-2МБ. 
Так же размер стека горутины может увеличиваться, в отличие от потока, который имеет фиксированный размер.
У горутин есть более простой способ обмена данными между собой, с помощью каналов.

1.2. Что такое каналы в Go? Что будет возвращено при чтении из закрытого канала?

Ответ: Канал - инструмент языка go для обеспечения общения между горутинами. 
Бывает буфферизированный и небуфферизированный. 
Реализован посредством кольцевого буффера.
При чтении из закрытого канала прочитаются данные, если они есть, а дальше будет вычитываться zero value.

1.3. Как в Go реализовать взаимное исключение при доступе к общим ресурсам?

Ответ: С помощью примитива синхронизации, например mutex или rwmutex.

1.4. Что такое ананимная функция в Go?

Ответ: Анонимная функция - это функция без имени. Они могут определяться внутри других функций и иметь доступ к контексту выполнения.

1.5. Как в Go обрабатывать паники и ошибки?

Ответ: Для обработки паник использовать Recover(), ошибки if err != nil.

1.6. Существует ли концепция наследования в Go?

Ответ: Как такого наследования в go нет, так, как он не ООП язык, однако, структуру можно передавать в качестве поля для другой структуры, что по сути и является наследованием.

1.7. Что такое интерфейсы в Go?

Ответ: Некий контракт, содержащий набор методов которые должны быть у другого типа, который реализует этот интерфейс.
Так же есть пустой интерфейс, поскольку у него нет методов, значит, что любой тип реализует этот интерфейс.

1.8. Что такое "грязное чтение" (dirty read) в контексте баз данных?

Ответ: Чтение добавленных или измененных данных из транзакции, которая впоследствии не подтвердится.